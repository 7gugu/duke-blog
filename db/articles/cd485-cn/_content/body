<h2>歷史</h2>
<p>2009 年大二下學期，我和小夥伴們一起參與一個校企聯合項目，開發一款煤礦用皮帶機綜合保護器，
我主要負責電路軟硬件設計，因爲礦井中皮帶很長，保護器節點間相距約六百米，
各節點除了處理數據收發還要負責中繼，爲了更優的可靠性和實時性，中繼部分採用 FPGA 硬件實現，
因此中繼帶來的延時遠小於一個位長。
因爲沒有額外的主機，按照傳統，只能指定其中一個節點爲主機，
該節點負責持續發出查詢命令同步所有節點之數據，但萬一該主節點中途出故障下線，整個總線將會停止運行。
所以爲了進一步提升系統魯棒性及降低軟件複雜性，於是我設計了一款帶仲裁的 485 協議，做到節點間可以自由收發數據，
只有第一字節用做仲裁的字段使用低速傳輸，剩餘數據使用傳統 485 高速傳輸，在引入仲裁的同時保留了高速，當然也是由硬件實現。<p>

<p>由於開芯片需要大量資金，所以此協議一直沒有封裝成爲獨立的芯片，直到 2017 年初，條件成熟，產品才得以問世。<p>


<h2>傳統 485 的侷限</h2>
<p>無論是串口還是 485 通訊，傳輸的數據正常都是要打包發送，常見的有類似 0xff 0xaa 兩個字節做爲數據包的開頭，加上用戶自定義的數據格式可以判斷包的結尾。
0xff 0xaa 這種標記方式容易與其後數據重複，做爲判斷不是絕對保險（譬如一個數據包正文正好也有一個 0xff 0xaa, 當該數據包出錯一次導致錯位，接收者認爲正文的 0xff 0xaa 是包頭，那麼其後的超時重傳可能會導致錯誤一直持續下去）；
絕對保險的方式是使用 ModBus RTU 也採用的空閒狀態來做分隔，總線沒有數據超過設定時間後爲空閒狀態，
空閒狀態下到來的數據便是數據包的開始，但這種方式對於用戶的實時性要求較高，譬如使用了帶 FIFO 緩衝的串口接收芯片，如果用戶未及時取出第一個數據包又收到第二個數據包，
那麼兩個數據包的數據連在一起無法通過時間來分隔（此時按照數據包格式通常也可以繼續區分數據包，但前提是數據包不能出錯）。<p>


<p>在普通的 485 應用場景中，CPU 直接控制 485 接口芯片接收數據，需要軟件判斷數據包何時開始何時結束，即使該數據包並非發給自己，CPU 也要被總線數據頻繁中斷，影響效率。
同時收到數據包後還要校驗以確保正確性，是一件非常佔用 CPU 資源的工作。
值得一提的情形是：如果 CPU 有較高優先級任務要處理，會很難指定數據接收和其它任務的優先級順序：如果數據接收的優先級更高，那麼當總線不停來數據的時候會不停打斷其它任務處理；
如果接收優先級低一些，那麼又會經常丟失數據。<p>

<p>同時，由於傳統 485 只能單台主機不停查詢各從機以同步數據，總線的數據一定少不了，且利用率很低，實時性和魯棒性也差。
譬如有一個從機是一隻開關，主機爲了知道開關當前是否按下，要不停發送查詢數據包，然後開關回覆一個包含當前狀態的數據包給主機；
如果可以做到各節點均可主動發出數據包，那麼當開關狀態改變時，只需要發送一個數據包給主機便可，即快省又便捷。<p>

<h2>CAN 總線的侷限</h2>
<p>爲了降低 CPU 佔用和自由收發數據包，所以一部分人選擇了 CAN 總線，CAN 控制器由硬件處理數據包收發、校驗，同時提供自由收發數據包的能力（仲裁），
但是 CAN 的數據包最多只能傳輸 8 個字節數據，而且高速 CAN 最高速率只有 1 Mbps, 比 485 的標準 10 Mbps 低太多（485 速率還可以更高），而且 CAN 的版權費用導致成本很高。<p>

<p>最新的 CAN FD (CAN with Flexible Data-Rate) 可以支持超過 1 Mbps 的速率，但由於硬件依舊不是推輓輸出，所以通常也只有 2 Mbps、5 Mbps, 而且也找不到獨立的控制器芯片，
由於要兼容 CAN2.0, 加上 CAN 本身硬件較爲複雜，Microchip 2015 年說計畫推出 CAN FD 控制器，結果到現在也沒有出來。(http://www.microchip.com/forums/m970901.aspx)<p>

<p>CAN 還有一個特色是废除传统的站地址编码，代之通過區分不同消息，以實現多播 (multicast), 但我覺得它帶來的缺點遠超過優點：因爲整個系統的命令空間會耦合在一起，
如果一開始命令空間分配的不合理，要想修改就會牽一髮而動全身；而且配置過濾接收也十分繁瑣；接收者也不清楚是誰發出的數據包；發送者雖然能收到 ACK 應答，也不能保證所有相關節點都收到。<p>

<p>在節點本來就不多的系統中（不超過 255），僅使用單播和廣播就完全夠用：譬如我要同時控制四個車窗升降，分別發送四個數據包給四個玻璃窗也不會很低效，而且當我想單獨控制某一個玻璃窗時也不需要改變數據包定義；
又如，當剎車等緊急情況發生時，使用廣播包可以最迅速通知到每一個節點，即便車窗不響應該命令，被緊急事務打斷一下也是完全可以接受的。<p>


<h2>CD485 介紹</h2>

<p>2017 年初，我接手一個工業機械臂的項目，爲了分別調試電機電流環、速度環及位置環參數，需要實時抓出電機運行中的數據，總線上還有很多傳感器，即使是正常使用數據量也會很大，
同時還要兼顧成本和電路面積，市面很多總線協議均不符合需求，爲此，我把 09 年的協議命名爲 CD485 協議，並推出獨立的控制器模組/芯片。<p>

<p>CD485（又名 CD-BUS）是一個相當開放的協議，硬件實現也相對簡單，除了芯片生產商需要支付少量版權費，其餘任何人都可以免費使用此協議及其變種，
只需要在產品說明中保留原始的版權信息。<p>

<p>CD485 協議只定義數據包格式，不規定用戶數據格式；只支持单播和廣播，不支持多播；只提供硬件避讓、避讓後自動重傳，而應答及出錯處理則由上層用戶負責。</p>

<p><img class="img-responsive img-rounded" src="cd485_rotate.png"></p>

<h3>特色</h3>
<p>當前硬件支持的特性:<br/>
• CD485 總線上各節點均可主動發起傳輸,通過節點地址仲裁以避免衝突<br/>
• 總線上每個數據包可以含有 0 ~ 253 字節用戶數據<br/>
• 共有 8 個 RX 緩存頁和 2 個 TX 緩存頁,每一頁 256 字節<br/>
• 硬件爲每個數據包自動完成 16 位 CRC 生成與校驗<br/>
• 波特率: 412 bps 至 9 Mbps（更換晶振可支持 10 Mbps; 且另有模組支持到 36 Mbps）<br/>
• 可分別爲仲裁字段和後續數據設置不同的波特率<br/>
• 兼容傳統 RS485 總線<br/>
• 提供 SPI 和 I2C 接口<br/>
• 配置和操作便捷<br/>
</p>


<h3>CD485 協議</h3>
<p><img class="img-responsive img-rounded" src="cd485_cn_protocol.png"></p>

<p>如果把兩個波特率設置同等大小，便可以在保留仲裁機制的同時與傳統 485 硬件進行通訊，傳統硬件優先級設置高於 CD485 節點，由 CD485 節點主動避讓傳統節點。

當然還可以關閉仲裁功能，完全使用傳統通訊模式；且模組不僅可以用於 485 通訊還可以用於串口等通訊。</p>


<h3>電路參考</h3>
<p><img class="img-responsive img-rounded" src="sch.png"></p>


<h3>完整文檔</h3>
<p>英文版: <a href="cd485.pdf">cd485.pdf</a></p>
<p>中文版: <a href="cd485_cn.pdf">cd485_cn.pdf</a></p>


<h3>產品實物圖</h3>
<p><img class="img-responsive img-rounded" src="cd485_photo.jpg"></p>

<h2>聯絡</h2>
<p>請發郵件至：duke#dukelec.com (# 替換爲 @)</p>
